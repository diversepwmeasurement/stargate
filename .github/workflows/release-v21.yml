env:
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  MAVEN_OPTS: -Xmx4g
jobs:
  build:
    name: Build coordinator
    needs: create-release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      name: Setup Maven
      run: "mkdir -p ~/.m2\ncat <<EOF > ~/.m2/settings.xml\n<settings>\n  <servers>\n\
        \    <server>\n      <id>artifactory-snapshots</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-releases</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n   </server>\n </servers>\n\
        </settings>\nEOF\n"
    - continue-on-error: true
      name: Build with Maven
      run: 'cd coordinator/

        ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        ./mvnw -B -ntp -q -ff -P dse clean package -DskipTests

        '
    - continue-on-error: true
      name: Zip-up `stargate-lib`
      run: 'cd coordinator/

        zip -r stargate-jars.zip starctl* stargate-lib

        '
    - continue-on-error: true
      name: Upload jars
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        asset_name: stargate-jars.zip
        asset_path: coordinator/stargate-jars.zip
        github_token: ${{ secrets.GITHUB_TOKEN }}
        upload_url: ${{needs.create-release.outputs.release-upload-url}}
  build-apis:
    name: Build APIs
    needs: create-release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      name: Setup Maven
      run: "mkdir -p ~/.m2\ncat <<EOF > ~/.m2/settings.xml\n<settings>\n  <servers>\n\
        \    <server>\n      <id>artifactory-snapshots</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-releases</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n   </server>\n </servers>\n\
        </settings>\nEOF\n"
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Build bridge protos library
      run: 'cd coordinator/

        JAVA_HOME=$JAVA_11 ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        JAVA_HOME=$JAVA_11 ./mvnw -B -ntp clean install -DskipTests -pl bridge-proto
        -am

        '
    - continue-on-error: true
      name: Build APIs with Maven
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -Dquarkus.package.type=uber-jar
        -DskipTests

        '
    - continue-on-error: true
      name: Zip-up APIs
      run: 'zip -j stargate-restapi.zip apis/sgv2-restapi/target/sgv2-restapi-*-runner.jar
        apis/sgv2-restapi/start-restapi.sh

        zip -j stargate-docsapi.zip apis/sgv2-docsapi/target/sgv2-docsapi-*-runner.jar
        apis/sgv2-docsapi/start-docsapi.sh

        zip -j stargate-graphqlapi.zip apis/sgv2-graphqlapi/target/sgv2-graphqlapi-*-runner.jar
        apis/sgv2-graphqlapi/start-graphqlapi.sh

        '
    - continue-on-error: true
      name: Upload API Zips
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        asset_path: stargate-*api.zip
        github_token: ${{ secrets.GITHUB_TOKEN }}
        upload_url: ${{needs.create-release.outputs.release-upload-url}}
  create-pr:
    name: Version upgrade PR
    needs:
    - create-release
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      name: Setup Maven
      run: "mkdir -p ~/.m2\ncat <<EOF > ~/.m2/settings.xml\n<settings>\n  <servers>\n\
        \    <server>\n      <id>artifactory-snapshots</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-releases</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n   </server>\n </servers>\n\
        </settings>\nEOF\n"
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Generate changelog
      run: ./update_changelog.sh
    - continue-on-error: true
      name: Update version numbers (coordinator)
      run: 'cd coordinator/

        ./mvnw -B -ntp release:update-versions -DautoVersionSubmodules=true versions:commit
        -Pdse

        ./mvnw -B -ntp xml-format:xml-format fmt:format -Pdse

        '
    - continue-on-error: true
      name: Update version numbers (apis)
      run: 'cd apis/

        ./mvnw -B -ntp release:update-versions -DautoVersionSubmodules=true versions:commit

        ./mvnw -B -ntp xml-format:xml-format fmt:format

        '
    - continue-on-error: true
      if: success()
      name: Rev Version
      uses: peter-evans/create-pull-request@v6
      with:
        base: v2.1
        branch-suffix: short-commit-hash
        commit-message: Bumping version for next v2.1 release
        labels: v2.1
        title: Bumping version for next v2.1 release
        token: ${{ secrets.GITHUB_TOKEN }}
  create-release:
    name: Create release
    needs: resolve-tag
    outputs:
      release-upload-url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      id: create_release
      name: Create release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        name: Release ${{needs.resolve-tag.outputs.release-tag}}
        prerelease: true
        tag_name: ${{needs.resolve-tag.outputs.release-tag}}
        token: ${{ secrets.GITHUB_TOKEN }}
  dispatch:
    continue-on-error: true
    if: ${{ always() }}
    name: Dispatch release event
    needs:
    - resolve-tag
    - build
    - publish-ossrh
    - publish-docker
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Repository dispatch
      uses: peter-evans/repository-dispatch@v3
      with:
        client-payload: '{"version": "${{ needs.resolve-tag.outputs.release-tag}}"}'
        event-type: stargate-v21-release
        repository: ${{ matrix.repo }}
        token: ${{ secrets[matrix.secret] }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - repo: stargate/jsonapi
          secret: SG_EVENTS_PAT
        - repo: riptano/c2
          secret: STARGATE_GH_RELEASE
        repo:
        - stargate/jsonapi
        - riptano/c2
  publish-docker:
    name: Publish docker images
    needs: resolve-tag
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      name: Setup Maven
      run: "mkdir -p ~/.m2\ncat <<EOF > ~/.m2/settings.xml\n<settings>\n  <servers>\n\
        \    <server>\n      <id>artifactory-snapshots</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-releases</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n   </server>\n </servers>\n\
        </settings>\nEOF\n"
    - continue-on-error: true
      name: Install coordinator
      run: "cd coordinator/\nJAVA_HOME=$JAVA_11 ./mvnw -B -ntp versions:set -DremoveSnapshot\
        \ versions:commit\nJAVA_HOME=$JAVA_11 ./mvnw -B -ntp clean install -P dse\
        \ -DskipTests \n"
    - continue-on-error: true
      name: Install APIs
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        cd ../

        '
    - continue-on-error: true
      name: Set up Docker QEMU
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKER_TOKEN }}
        username: ${{ secrets.DOCKER_USERNAME }}
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Build and push (coordinator, DockerHub)
      run: 'cd coordinator/

        ./build_docker_images.sh -p -t ${{needs.resolve-tag.outputs.release-tag}}

        '
    - continue-on-error: true
      if: ${{ inputs.skipPublish }}
      name: Build without push (coordinator, DockerHub)
      run: 'cd coordinator/

        ./build_docker_images.sh -t ${{needs.resolve-tag.outputs.release-tag}}

        '
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Build and push (apis, DockerHub)
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -DskipTests -Dquarkus.container-image.build=true
        -Dquarkus.docker.buildx.platform=linux/amd64,linux/arm64 -Dquarkus.container-image.push=true
        -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

        cd ../

        '
    - continue-on-error: true
      if: ${{ inputs.skipPublish }}
      name: Build without push (apis, DockerHub)
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -DskipTests -Dquarkus.container-image.build=true
        -Dquarkus.docker.buildx.platform=linux/amd64,linux/arm64 -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

        cd ../

        '
    - continue-on-error: true
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
        aws-region: us-east-1
        aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
    - continue-on-error: true
      id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Build and push (coordinator, Amazon ECR)
      run: 'cd coordinator/

        ./build_docker_images.sh -p -t ${{needs.resolve-tag.outputs.release-tag}}
        -r ${{ secrets.ECR_REPOSITORY }}

        '
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Download branding assets
      run: 'curl https://www.datastax.com/favicon.ico -o ./apis/sgv2-quarkus-common/src/main/resources/META-INF/branding/favicon.ico

        curl https://cdn.sanity.io/files/bbnkhnhl/production/cf8b48832cfd43cdb24aec0e0d1c656e9234b620.zip
        -o icons.zip

        unzip -j icons.zip ''Brand\ Icons/astra-square.png'' -d ./apis/sgv2-quarkus-common/src/main/resources/META-INF/branding/

        mv ./apis/sgv2-quarkus-common/src/main/resources/META-INF/branding/astra-square.png
        ./apis/sgv2-quarkus-common/src/main/resources/META-INF/branding/logo.png

        '
    - continue-on-error: true
      env:
        QUARKUS_APPLICATION_NAME: Astra DB GraphQL API
      if: ${{ !inputs.skipPublish }}
      name: Build and push (graphqlapi, Amazon ECR)
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -pl sgv2-graphqlapi -am -DskipTests
        -Dquarkus.container-image.build=true -Dquarkus.docker.buildx.platform=linux/amd64,linux/arm64
        -Dquarkus.container-image.push=true -Dquarkus.container-image.registry=${{
        secrets.ECR_REPOSITORY }} -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

        '
    - continue-on-error: true
      env:
        QUARKUS_APPLICATION_NAME: Astra DB Document API
        QUARKUS_SMALLRYE_OPENAPI_INFO_CONTACT_NAME: DataStax
        QUARKUS_SMALLRYE_OPENAPI_INFO_CONTACT_URL: https://www.datastax.com/contact-us
        QUARKUS_SMALLRYE_OPENAPI_INFO_DESCRIPTION: The Astra DB Document API modifies
          and queries data stored as unstructured JSON documents in collections. See
          the [documentation site](https://docs.datastax.com/en/astra-serverless/docs/develop/dev-with-doc.html)
          for additional information.
        QUARKUS_SMALLRYE_OPENAPI_INFO_LICENSE_NAME: ''
        QUARKUS_SMALLRYE_OPENAPI_INFO_LICENSE_URL: ''
        QUARKUS_SMALLRYE_OPENAPI_INFO_TERMS_OF_SERVICE: https://www.datastax.com/legal
      if: ${{ !inputs.skipPublish }}
      name: Build and push (docsapi, Amazon ECR)
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -pl sgv2-docsapi -am -DskipTests
        -Dquarkus.container-image.build=true -Dquarkus.docker.buildx.platform=linux/amd64,linux/arm64
        -Dquarkus.container-image.push=true -Dquarkus.container-image.registry=${{
        secrets.ECR_REPOSITORY }} -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

        '
    - continue-on-error: true
      env:
        QUARKUS_APPLICATION_NAME: Astra DB REST API
        QUARKUS_SMALLRYE_OPENAPI_INFO_CONTACT_NAME: DataStax
        QUARKUS_SMALLRYE_OPENAPI_INFO_CONTACT_URL: https://www.datastax.com/contact-us
        QUARKUS_SMALLRYE_OPENAPI_INFO_DESCRIPTION: The Astra DB REST API exposes CRUD
          access to data stored in Cassandra tables. See the [documentation site](https://docs.datastax.com/en/astra-serverless/docs/develop/dev-with-rest.html)
          for additional information.
        QUARKUS_SMALLRYE_OPENAPI_INFO_LICENSE_NAME: ''
        QUARKUS_SMALLRYE_OPENAPI_INFO_LICENSE_URL: ''
        QUARKUS_SMALLRYE_OPENAPI_INFO_TERMS_OF_SERVICE: https://www.datastax.com/legal
      if: ${{ !inputs.skipPublish }}
      name: Build and push (restapi, Amazon ECR)
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp clean package -pl sgv2-restapi -am -DskipTests
        -Dquarkus.container-image.build=true -Dquarkus.docker.buildx.platform=linux/amd64,linux/arm64
        -Dquarkus.container-image.push=true -Dquarkus.container-image.registry=${{
        secrets.ECR_REPOSITORY }} -Dquarkus.container-image.tag=${{needs.resolve-tag.outputs.release-tag}}

        '
  publish-ossrh:
    name: Publish to OSSRH
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      run: echo "JAVA_11=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        cache: maven
        distribution: temurin
        java-version: '17'
    - continue-on-error: true
      run: echo "JAVA_17=$JAVA_HOME" >> $GITHUB_ENV
    - continue-on-error: true
      env:
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      name: Setup Maven
      run: "mkdir -p ~/.m2\ncat <<EOF > ~/.m2/settings.xml\n<settings>\n  <servers>\n\
        \    <server>\n      <id>ossrh</id>\n      <username>${OSSRH_USERNAME}</username>\n\
        \      <password>${OSSRH_TOKEN}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-snapshots</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n    </server>\n    <server>\n\
        \      <id>artifactory-releases</id>\n      <username>${ARTIFACTORY_USERNAME}</username>\n\
        \      <password>${ARTIFACTORY_PASSWORD}</password>\n   </server>\n </servers>\n\
        </settings>\nEOF\n"
    - continue-on-error: true
      id: install-secret-key
      name: Install gpg secret key
      run: 'cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import

        '
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Publish coordinator JARs
      run: 'cd coordinator/

        JAVA_HOME=$JAVA_11 ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        JAVA_HOME=$JAVA_11 ./mvnw -B -ntp -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD
        }} clean deploy -DskipTests -P deploy,dse

        '
    - continue-on-error: true
      if: ${{ !inputs.skipPublish }}
      name: Publish Quarkus Common JAR
      run: 'cd apis/

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp versions:set -DremoveSnapshot versions:commit

        JAVA_HOME=$JAVA_17 ./mvnw -B -ntp -pl sgv2-quarkus-common -am -Dgpg.passphrase=${{
        secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} clean deploy -DskipTests -P deploy

        '
  resolve-tag:
    name: Resolve tag
    outputs:
      release-tag: ${{ steps.resolve_tag.outputs.tag }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      id: vars
      name: Set reference
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
    - continue-on-error: true
      id: resolve_tag
      name: Resolve tag
      run: 'TAG=${{ inputs.tag != null && inputs.tag || steps.vars.outputs.tag }}

        echo "Resolved tag for the release $TAG"

        echo "tag=${TAG}" >> $GITHUB_OUTPUT

        '
  sign-images:
    env:
      COSIGN_VERSION: v1.9.0
    if: ${{ !inputs.skipPublish }}
    name: Sign container images
    needs:
    - resolve-tag
    - publish-docker
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Install Cosign
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: ${COSIGN_VERSION}
    - continue-on-error: true
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
        aws-region: us-east-1
        aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
    - continue-on-error: true
      id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
    - continue-on-error: true
      env:
        AUX_KEY: signedby
        AUX_VALUE: stargate
        COSIGN_IMAGE: ${{ secrets.ECR_REPOSITORY }}/stargateio/${{ matrix.image }}:${{
          needs.resolve-tag.outputs.release-tag }}
        COSIGN_IMAGE_V2: ${{ secrets.ECR_REPOSITORY }}/stargateio/${{ matrix.image
          }}:v2.1
        COSIGN_KEY_FILE: _cosign_key_
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD}}
        COSIGN_PRIVATE_BASE64: ${{ secrets.COSIGN_PRIVATE_BASE64}}
      name: Sign a docker image
      run: 'echo $COSIGN_PRIVATE_BASE64 | base64 --decode > $COSIGN_KEY_FILE

        echo "=== signing image [$COSIGN_IMAGE] ..."

        cosign sign --key $COSIGN_KEY_FILE -a $AUX_KEY=$AUX_VALUE $COSIGN_IMAGE

        echo "=== signing image [$COSIGN_IMAGE_V2] ..."

        cosign sign --key $COSIGN_KEY_FILE -a $AUX_KEY=$AUX_VALUE $COSIGN_IMAGE_V2

        '
      shell: bash
    strategy:
      matrix:
        image:
        - restapi
        - graphqlapi
        - docsapi
name: Release v2.1
on:
  repository_dispatch:
    types: trigger-ga___release-v21.yml
